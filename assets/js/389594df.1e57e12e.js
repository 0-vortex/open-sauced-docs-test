"use strict";(self.webpackChunkopen_sauced_docs_test=self.webpackChunkopen_sauced_docs_test||[]).push([[322],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(t),d=i,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return t?a.createElement(h,r(r({ref:n},c),{},{components:t})):a.createElement(h,r({ref:n},c))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,r=new Array(s);r[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var p=2;p<s;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8064:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var a=t(7462),i=t(3366),s=(t(7294),t(3905)),r=["components"],o={},l="@open-sauced/semantic-release-conventional-config",p={unversionedId:"maintainers/semantic-release",id:"maintainers/semantic-release",isDocsHomePage:!1,title:"@open-sauced/semantic-release-conventional-config",description:"Description",source:"@site/docs/maintainers/semantic-release.md",sourceDirName:"maintainers",slug:"/maintainers/semantic-release",permalink:"/maintainers/semantic-release",editUrl:"https://github.com/open-sauced/docs.opensauced.pizza/edit/main/docs/maintainers/semantic-release.md",tags:[],version:"current",lastUpdatedBy:"TED Vortex",lastUpdatedAt:1636141337,formattedLastUpdatedAt:"11/5/2021",frontMatter:{},sidebar:"docs",previous:{title:"@open-sauced/check-engines",permalink:"/maintainers/check-engines"}},c=[{value:"Description",id:"description",children:[],level:2},{value:"Dependencies",id:"dependencies",children:[],level:2},{value:"Installation",id:"installation",children:[],level:2},{value:"Usage",id:"usage",children:[],level:2},{value:"Configuration",id:"configuration",children:[],level:2},{value:"Workflow examples",id:"workflow-examples",children:[{value:"Node application",id:"node-application",children:[],level:3},{value:"Npm library",id:"npm-library",children:[],level:3},{value:"Docker image",id:"docker-image",children:[],level:3},{value:"Pre-releases",id:"pre-releases",children:[],level:3}],level:2},{value:"FAQ",id:"faq",children:[{value:"Which assets are pushed to git",id:"which-assets-are-pushed-to-git",children:[],level:3},{value:"What is the commit convention",id:"what-is-the-commit-convention",children:[],level:3},{value:"How to enrich the static distribution",id:"how-to-enrich-the-static-distribution",children:[],level:3},{value:"How to start using pre-releases",id:"how-to-start-using-pre-releases",children:[],level:3}],level:2},{value:"Contributing",id:"contributing",children:[],level:2}],u={toc:c};function m(e){var n=e.components,t=(0,i.Z)(e,r);return(0,s.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"open-saucedsemantic-release-conventional-config"},"@open-sauced/semantic-release-conventional-config"),(0,s.kt)("h2",{id:"description"},"Description"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"npm")," package ",(0,s.kt)("inlineCode",{parentName:"p"},"@open-sauced/semantic-release-conventional-config")," is designed to help ",(0,s.kt)("inlineCode",{parentName:"p"},"npm")," packages auto-release to ",(0,s.kt)("inlineCode",{parentName:"p"},"npm")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"ghcr")," registries while generating github releases and changelog using conventional commit convention."),(0,s.kt)("p",null,"Version 2 supports alpha and beta pre-releases using coresponding branches."),(0,s.kt)("h2",{id:"dependencies"},"Dependencies"),(0,s.kt)("p",null,"This package uses the following modules:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/conventional-changelog/conventional-changelog"},(0,s.kt)("inlineCode",{parentName:"a"},"conventional-changelog-conventionalcommits"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/semantic-release/commit-analyzer"},(0,s.kt)("inlineCode",{parentName:"a"},"@semantic-release/commit-analyzer"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/semantic-release/release-notes-generator"},(0,s.kt)("inlineCode",{parentName:"a"},"@semantic-release/release-notes-generator"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/semantic-release/changelog"},(0,s.kt)("inlineCode",{parentName:"a"},"@semantic-release/changelog"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/semantic-release/npm"},(0,s.kt)("inlineCode",{parentName:"a"},"@semantic-release/npm"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/semantic-release/git"},(0,s.kt)("inlineCode",{parentName:"a"},"@semantic-release/git"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/semantic-release/github"},(0,s.kt)("inlineCode",{parentName:"a"},"@semantic-release/github"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/semantic-release-plus/semantic-release-plus/tree/master/packages/plugins/docker"},(0,s.kt)("inlineCode",{parentName:"a"},"@semantic-release-plus/docker")))),(0,s.kt)("h2",{id:"installation"},"Installation"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"npm install --save-dev @open-sauced/semantic-release-conventional-config\n")),(0,s.kt)("p",null,"Create a ",(0,s.kt)("a",{parentName:"p",href:"https://semantic-release.gitbook.io/semantic-release/usage/configuration#configuration-file"},"release.config.js")," file and populate it with the preset:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"module.exports = {\n extends: '@open-sauced/semantic-release-conventional-config',\n};\n")),(0,s.kt)("h2",{id:"usage"},"Usage"),(0,s.kt)("p",null,"Add ",(0,s.kt)("inlineCode",{parentName:"p"},"semantic-release")," to the ",(0,s.kt)("inlineCode",{parentName:"p"},"scripts")," section to your ",(0,s.kt)("inlineCode",{parentName:"p"},"package.json")," file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "semantic-release": "npx semantic-release"\n  }\n}\n')),(0,s.kt)("p",null,"The reason why we provide ",(0,s.kt)("inlineCode",{parentName:"p"},"npx")," in the ",(0,s.kt)("inlineCode",{parentName:"p"},"scripts")," section is for the people using this as a development enhancement, interactive configurations or trimmed dependency trees, where using ",(0,s.kt)("inlineCode",{parentName:"p"},"npx")," is preferred over installing all the dependencies at once."),(0,s.kt)("p",null,"In your release step run the ",(0,s.kt)("inlineCode",{parentName:"p"},"semantic-release")," script now:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"npm run semantic-release\n")),(0,s.kt)("p",null,"You can skip the ",(0,s.kt)("inlineCode",{parentName:"p"},"scripts")," section however ",(0,s.kt)("inlineCode",{parentName:"p"},"semantic-release")," will still be a peer dependency of ",(0,s.kt)("inlineCode",{parentName:"p"},"@open-sauced/semantic-release-conventional-config"),". "),(0,s.kt)("p",null,"Like that it is enough to just run this command in the workflow:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"npx semantic-release\n")),(0,s.kt)("h2",{id:"configuration"},"Configuration"),(0,s.kt)("p",null,"Set ",(0,s.kt)("inlineCode",{parentName:"p"},"DISABLE_DOCKER")," to any value if you want to disable the docker docker plugin."),(0,s.kt)("p",null,"Set ",(0,s.kt)("inlineCode",{parentName:"p"},"private")," to true in ",(0,s.kt)("inlineCode",{parentName:"p"},"package.json")," if you want to disable ",(0,s.kt)("inlineCode",{parentName:"p"},"npm")," releases."),(0,s.kt)("p",null,"An example leveraging ",(0,s.kt)("inlineCode",{parentName:"p"},"node")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"docker")," build artifacts can be found in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/open-sauced/open-sauced/blob/main/.github/workflows/release.yml"},"open-sauced"),". "),(0,s.kt)("p",null,"A few less inter dependent configurations will be described in the next section. "),(0,s.kt)("h2",{id:"workflow-examples"},"Workflow examples"),(0,s.kt)("h3",{id:"node-application"},"Node application"),(0,s.kt)("p",null,"This example requires ",(0,s.kt)("inlineCode",{parentName:"p"},'"private": true,')," in your ",(0,s.kt)("inlineCode",{parentName:"p"},"package.json")," and simplifies the workflow to lightning fast deployment:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'release:\n    environment:\n      name: production\n      url: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.release.outputs.version }}\n    name: Semantic release\n    runs-on: ubuntu-latest\n    steps:\n      - name: "\u2601\ufe0f checkout repository"\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: "\ud83d\udd27 setup node"\n        uses: actions/setup-node@v2.1.5\n        with:\n          node-version: 14\n\n      - name: "\ud83d\udd27 setup cache"\n        uses: actions/cache@v2\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles(\'**/npm-shrinkwrap.json\') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: "\ud83d\udd27 install npm@latest"\n        run: npm i -g npm@latest\n\n      - name: "\ud83d\udce6 install dependencies"\n        run: npm ci\n\n      - name: "\ud83d\ude80 static app"\n        run: npm run build\n\n      - name: "\ud83d\ude80 release"\n        id: release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          DISABLE_DOCKER: true\n          GIT_AUTHOR_NAME: ${{ github.event.commits[0].author.username }}\n          GIT_AUTHOR_EMAIL: ${{ github.event.commits[0].author.email }}\n        run: |\n          npm run semantic-release\n          echo "::set-output name=version::$(cat package.json | jq -r \'.version\')"\n')),(0,s.kt)("h3",{id:"npm-library"},"Npm library"),(0,s.kt)("p",null,"For ",(0,s.kt)("inlineCode",{parentName:"p"},"npm")," libraries we need to set the environment URL manually and set a ",(0,s.kt)("inlineCode",{parentName:"p"},"NPM_TOKEN")," environment variable. This also disables docker builds:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'name: "Release"\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    environment:\n      name: npm\n      url: https://www.npmjs.com/package/@open-sauced/semantic-release-conventional-config/v/${{ steps.release.outputs.version }}\n    name: Semantic release\n    runs-on: ubuntu-latest\n    steps:\n      - name: "\u2601\ufe0f checkout repository"\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: "\ud83d\udd27 setup node"\n        uses: actions/setup-node@v2.1.5\n        with:\n          node-version: 14\n\n      - name: "\ud83d\udd27 setup cache"\n        uses: actions/cache@v2\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles(\'**/package-lock.json\') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: "\ud83d\udd27 install npm@latest"\n        run: npm i -g npm@latest\n\n      - name: "\ud83d\udce6 install dependencies"\n        run: npm ci\n\n      - name: "\ud83d\ude80 release"\n        id: release\n        env:\n          DISABLE_DOCKER: true\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n          GIT_AUTHOR_NAME: ${{ github.event.commits[0].author.username }}\n          GIT_AUTHOR_EMAIL: ${{ github.event.commits[0].author.email }}\n        run: |\n          npm run semantic-release\n          echo "::set-output name=version::$(cat package.json | jq -r \'.version\')"\n')),(0,s.kt)("p",null,"An up-to-date version of the example above is available at ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/open-sauced/semantic-release-conventional-config/blob/main/.github/workflows/release.yml"},"@open-sauced/semantic-release-conventional-config"),"."),(0,s.kt)("h3",{id:"docker-image"},"Docker image"),(0,s.kt)("p",null,"For docker builds it's best to build your node application in parallel with the container and re-use the artifact at a later stage:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'name: "Release"\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  docker:\n    name: Build container\n    runs-on: ubuntu-latest\n    steps:\n      - name: "\u2601\ufe0f checkout repository"\n        uses: actions/checkout@v2\n\n      - name: "\ud83d\udd27 setup buildx"\n        uses: docker/setup-buildx-action@v1\n\n      - name: "\ud83d\udce6 docker build"\n        uses: docker/build-push-action@v2\n        with:\n          context: .\n          tags: ${{ github.repository }}:latest\n          outputs: type=docker,dest=/tmp/docker.tar\n          push: false\n\n      - name: "\ud83d\udcc2 docker artifacts"\n        uses: actions/upload-artifact@v2\n        with:\n          name: docker\n          path: /tmp/docker.tar\n\n  build:\n    name: Build application\n    runs-on: ubuntu-latest\n    steps:\n      - name: "\u2601\ufe0f checkout repository"\n        uses: actions/checkout@v2\n\n      - name: "\ud83d\udd27 setup node"\n        uses: actions/setup-node@v2.1.5\n        with:\n          node-version: 14\n\n      - name: "\ud83d\udd27 setup cache"\n        uses: actions/cache@v2\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles(\'**/npm-shrinkwrap.json\') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: "\ud83d\udd27 install npm@latest"\n        run: npm i -g npm@latest\n\n      - name: "\ud83d\udce6 install dependencies"\n        run: npm ci\n\n      - name: "\ud83d\udcca repository visualizer"\n        id: diagram\n        uses: githubocto/repo-visualizer@0.7.1\n        with:\n          excluded_paths: "node_modules,build,.storybook,.netlify,.github,npm-shrinkwap.json"\n          output_file: "public/diagram.svg"\n          should_push: false\n          artifact_name: "diagram"\n\n      - name: "\ud83d\ude80 static app"\n        run: npm run build\n\n      - name: "\ud83d\udcc2 production artifacts"\n        uses: actions/upload-artifact@v2\n        with:\n          name: build\n          path: build\n\n  release:\n    environment:\n      name: production\n      url: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.release.outputs.version }}\n    name: Semantic release\n    needs:\n      - docker\n      - build\n    runs-on: ubuntu-latest\n    steps:\n      - name: "\u2601\ufe0f checkout repository"\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: "\ud83d\udd27 setup node"\n        uses: actions/setup-node@v2.1.5\n        with:\n          node-version: 14\n\n      - name: "\ud83d\udd27 setup cache"\n        uses: actions/cache@v2\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles(\'**/npm-shrinkwrap.json\') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: "\ud83d\udd27 install npm@latest"\n        run: npm i -g npm@latest\n\n      - name: "\ud83d\udce6 install dependencies"\n        run: npm ci\n\n      - name: "\ud83d\udcc2 download docker artifacts"\n        uses: actions/download-artifact@v2\n        with:\n          name: docker\n          path: /tmp\n\n      - name: "\ud83d\udce6 load tag"\n        run: |\n          docker load --input /tmp/docker.tar\n          docker image ls -a\n\n      - name: "\ud83d\udcc2 download build artifacts"\n        uses: actions/download-artifact@v2\n        with:\n          name: build\n          path: /tmp/build\n\n      - name: "\ud83d\ude80 release"\n        id: release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          DOCKER_USERNAME: ${{ github.repository_owner }}\n          DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}\n          GIT_AUTHOR_NAME: ${{ github.event.commits[0].author.username }}\n          GIT_AUTHOR_EMAIL: ${{ github.event.commits[0].author.email }}\n        run: |\n          cp -R /tmp/build ./build\n          npm run semantic-release\n          echo "::set-output name=version::$(cat package.json | jq -r \'.version\')"\n\n  cleanup:\n    name: Cleanup actions\n    needs:\n      - release\n    runs-on: ubuntu-latest\n    steps:\n      - name: "\u267b\ufe0f remove build artifacts"\n        uses: geekyeggo/delete-artifact@v1\n        with:\n          name: |\n            build\n            docker\n')),(0,s.kt)("p",null,"An up-to-date version of the example above is available at ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/open-sauced/open-sauced/blob/main/.github/workflows/release.yml"},"open-sauced/open-sauced"),"."),(0,s.kt)("h3",{id:"pre-releases"},"Pre-releases"),(0,s.kt)("p",null,"This workflow requires the creation of ",(0,s.kt)("inlineCode",{parentName:"p"},"alpha")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"beta")," protected branches while templating every commit to be conventional. It does not support squashing without creating extremely complex conflict resolution: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'name: "Release"\n\non:\n  push:\n    branches:\n      - main\n      - beta\n      - alpha\n\njobs:\n  release:\n    environment:\n      name: npm\n      url: https://www.npmjs.com/package/open-sauced-semantic-config-test/v/${{ steps.release.outputs.version }}\n    name: Semantic release\n    runs-on: ubuntu-latest\n    steps:\n      - name: "\u2601\ufe0f checkout repository"\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: "\ud83d\udd27 setup node"\n        uses: actions/setup-node@v2.1.5\n        with:\n          node-version: 14\n\n      - name: "\ud83d\udd27 setup cache"\n        uses: actions/cache@v2\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles(\'**/package-lock.json\') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: "\ud83d\udd27 install npm@7"\n        run: npm i -g npm@7\n\n      - name: "\ud83d\udce6 install dependencies"\n        run: npm ci\n\n      - name: "\ud83d\ude80 release"\n        id: release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n          DISABLE_DOCKER: true\n          GIT_AUTHOR_NAME: ${{ github.event.commits[0].author.username }}\n          GIT_AUTHOR_EMAIL: ${{ github.event.commits[0].author.email }}\n        run: |\n          npm run semantic-release\n          echo "::set-output name=version::$(cat package.json | jq -r \'.version\')"\n')),(0,s.kt)("h2",{id:"faq"},"FAQ"),(0,s.kt)("h3",{id:"which-assets-are-pushed-to-git"},"Which assets are pushed to git"),(0,s.kt)("p",null,"The following assets are added to git using ",(0,s.kt)("inlineCode",{parentName:"p"},"@semantic-release/git"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "assets": [\n      "CHANGELOG.md",\n      "package.json",\n      "package-lock.json",\n      "npm-shrinkwrap.json",\n      "public/diagram.svg"\n  ]\n}\n')),(0,s.kt)("h3",{id:"what-is-the-commit-convention"},"What is the commit convention"),(0,s.kt)("p",null,"The following commit rules are enforced by ",(0,s.kt)("inlineCode",{parentName:"p"},"@semantic-release/commit-analyzer"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "preset": "conventionalcommits",\n  "releaseRules": [\n    {"type": "build", "release": "minor"},\n    {"type": "ci", "release": "patch"},\n    {"type": "docs", "release": "minor"},\n    {"type": "style", "release": "patch"},\n    {"type": "refactor", "release": "patch"},\n    {"type": "test", "release": "patch"},\n    {"type": "revert", "release": "patch"},\n    {"type": "chore", "release": false}\n  ],\n  "parserOpts": {\n    "noteKeywords": ["BREAKING CHANGE", "BREAKING CHANGES", "BREAKING"]\n  }\n}\n')),(0,s.kt)("h3",{id:"how-to-enrich-the-static-distribution"},"How to enrich the static distribution"),(0,s.kt)("p",null,"The following assets are packed into the github release download using ",(0,s.kt)("inlineCode",{parentName:"p"},"@semantic-release/github"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "assets": [\n    {\n      "path": "pack/*.tgz",\n      "label": "Static distribution"\n    }\n  ]\n}\n')),(0,s.kt)("h3",{id:"how-to-start-using-pre-releases"},"How to start using pre-releases"),(0,s.kt)("p",null,"Create the ",(0,s.kt)("inlineCode",{parentName:"p"},"alpha")," and/or ",(0,s.kt)("inlineCode",{parentName:"p"},"beta")," branches and protect them from being deleted or pushed to directly by non-administrators."),(0,s.kt)("p",null,"Switch your branching strategy to ",(0,s.kt)("inlineCode",{parentName:"p"},"merge")," and enable conventional commits checking."),(0,s.kt)("p",null,"You will have to resolve merge conflicts between ",(0,s.kt)("inlineCode",{parentName:"p"},"alpha"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"beta")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"main")," branches as described in the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/semantic-release/semantic-release/tree/master/docs/recipes"},"semantic-releases recipes"),". "),(0,s.kt)("h2",{id:"contributing"},"Contributing"),(0,s.kt)("p",null,"We're always happy to onboard people into open source!"),(0,s.kt)("p",null,"Check out the repository at ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/open-sauced/semantic-release-conventional-config"},"@open-sauced/semantic-release-conventional-config")," \u2764\ufe0f"))}m.isMDXComponent=!0}}]);